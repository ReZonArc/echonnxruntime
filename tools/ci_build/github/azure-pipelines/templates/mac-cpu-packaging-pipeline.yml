parameters:
- name: AdditionalBuildFlags
  displayName: Additional build flags for build.py
  type: string
  default: ''

# Must be 1 or 0
- name: AllowReleasedOpsetOnly
  displayName: Whether unreleased onnx opsets are allowed
  type: number
  default: 1
  values:
  - 1
  - 0

- name: WithCache
  displayName: Build with Cache
  type: boolean
  default: false

- name: DoESRP
  displayName: Do ESRP
  type: boolean
  default: false

stages:
- stage: MacOS_C_API_Packaging_CPU
  dependsOn: []
  jobs:
  - template: mac-cpu-packing-jobs.yml
    parameters:
      MacosArch: 'x86_64'
      AllowReleasedOpsetOnly: ${{ parameters.AllowReleasedOpsetOnly }}
      AdditionalBuildFlags: ${{ parameters.AdditionalBuildFlags }}
      WithCache: ${{ parameters.WithCache }}

  - template: mac-cpu-packing-jobs.yml
    parameters:
      MacosArch: 'arm64'
      AllowReleasedOpsetOnly: ${{ parameters.AllowReleasedOpsetOnly }}
      AdditionalBuildFlags: ${{ parameters.AdditionalBuildFlags }}
      WithCache: ${{ parameters.WithCache }}
  - template: mac-cpu-packing-jobs.yml
    parameters:
      MacosArch: 'universal2'
      AllowReleasedOpsetOnly: ${{ parameters.AllowReleasedOpsetOnly }}
      AdditionalBuildFlags: ${{ parameters.AdditionalBuildFlags }}
      WithCache: ${{ parameters.WithCache }}


- stage: MacOS_C_API_Package_Publish
  dependsOn: MacOS_C_API_Packaging_CPU
  jobs:
  - job: MacOS_C_API_Package_Publish
    pool:
      name: 'Azure Pipelines'
      image: 'macOS-14'
      os: 'macOS'
    templateContext:
      inputs:
      - input: pipelineArtifact
        artifactName: onnxruntime-osx-x86_64
        targetPath: $(Build.ArtifactStagingDirectory)
      - input: pipelineArtifact
        artifactName: onnxruntime-osx-arm64
        targetPath: $(Build.ArtifactStagingDirectory)
      outputs:
      - output: pipelineArtifact
        targetPath: $(Build.ArtifactStagingDirectory)
        artifactName: 'onnxruntime-osx'
    steps:
    - checkout: self

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.13'
        addToPath: true

    - task: PythonScript@0
      displayName: 'Prepare, Create Universal Binary, and Zip with Python'
      inputs:
        scriptSource: 'filePath'
        scriptPath: 'tools/ci_build/prepare_packages.py' 

    - template: mac-esrp-dylib.yml
      parameters:
        FolderPath: '$(Build.ArtifactStagingDirectory)'
        Pattern: '*.zip'

    - script: |
        set -ex
        pushd '$(Build.ArtifactStagingDirectory)'
        find . '*.zip' -exec unzip {} \;
        rm -f *.zip;
        find . -type d -name 'onnxruntime-osx-*' -exec tar -czf {}.tgz {} \;
        find . -type d -name 'onnxruntime-osx-*' -exec rm -rf {} \;
        ls -l
        popd
      displayName: 'Unzip Signed Files and Repackage to TGZ'

    - bash: |
        set -ex
        mkdir -p $(Agent.TempDirectory)/macpackage
        find $(Build.ArtifactStagingDirectory) -name "*.tgz" -exec tar -zxvf {} -C $(Agent.TempDirectory)/macpackage \;
        find $(Agent.TempDirectory)/macpackage -name "*.dylib" -exec codesign -dvvv {} \;
        find $(Agent.TempDirectory)/macpackage -name "*.dylib" -exec ls -l {} \;
        rm -rf $(Agent.TempDirectory)/macpackage
      displayName: 'Verify Code Signing'
