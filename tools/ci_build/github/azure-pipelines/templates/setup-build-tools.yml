steps:
- task: PythonScript@0
  displayName: 'Download, Build, and Run setup-build-tools Action'
  inputs:
    scriptSource: 'inline'
    script: |
      import os
      import subprocess
      import requests
      import zipfile
      import shutil
      import glob

      # --- 1. Define Action Inputs ---
      # These will be set as environment variables for the node script
      action_inputs = {
          'INPUT_CMAKE-VERSION': '3.29.0',
          'INPUT_CMAKE-HASH': 'YOUR_CMAKE_SHA512_HASH', # Replace with the actual SHA512 hash for the Linux x86_64 version
          'INPUT_VCPKG-VERSION': '2023.10.19',
          'INPUT_VCPKG-HASH': 'YOUR_VCPKG_SHA512_HASH', # Replace with the actual SHA512 hash
          'INPUT_ADD-CMAKE-TO-PATH': 'true',
          'INPUT_DISABLE-TERRAPIN': 'true' # Terrapin is not expected to be on ADO agent
      }

      # --- 2. Download and Extract the Action Source ---
      action_version = "v0.0.7" # Specify the release tag to use
      zip_url = f"https://github.com/microsoft/onnxruntime-github-actions/archive/refs/tags/{action_version}.zip"
      zip_path = "onnxruntime-actions.zip"
      extract_dir = "unzipped_action_src"
      
      print(f"Downloading action source from: {zip_url}")
      response = requests.get(zip_url, stream=True)
      response.raise_for_status()
      with open(zip_path, 'wb') as f:
          for chunk in response.iter_content(chunk_size=8192):
              f.write(chunk)
      
      print(f"Extracting {zip_path} to {extract_dir}")
      if os.path.exists(extract_dir):
          shutil.rmtree(extract_dir) # Clean up previous extraction
      with zipfile.ZipFile(zip_path, 'r') as zip_ref:
          zip_ref.extractall(extract_dir)

      # Find the actual extracted folder name (it's usually repo-name-commit-hash)
      extracted_folders = glob.glob(os.path.join(extract_dir, 'onnxruntime-github-actions-*'))
      if not extracted_folders:
          raise Exception("Could not find extracted action source directory.")
      action_source_path = extracted_folders[0]
      print(f"Found action source at: {action_source_path}")

      # --- 3. Build the Action ---
      print("Installing npm dependencies...")
      subprocess.run(['npm', 'ci'], check=True, cwd=action_source_path)
      
      print("Building the action with esbuild...")
      subprocess.run(['npm', 'run', 'build'], check=True, cwd=action_source_path)

      # --- 4. Run the Action Script ---
      action_script_path = os.path.join(action_source_path, 'build', 'setup-build-tools', 'dist', 'index.js')
      if not os.path.exists(action_script_path):
          raise FileNotFoundError(f"Action script not found at {action_script_path} after build.")
          
      # Set environment variables for the action
      env = os.environ.copy()
      env.update(action_inputs)

      print(f"Running action script: {action_script_path}")
      with open('action_output.log', 'w') as log_file:
          process = subprocess.run(
              ['node', action_script_path],
              env=env,
              stdout=log_file,
              stderr=subprocess.STDOUT,
              text=True
          )
      
      print("Action script finished.")
      if process.returncode != 0:
          print(f"##vso[task.logissue type=error]Action script failed with exit code {process.returncode}.")
          with open('action_output.log', 'r') as log_file:
              print(log_file.read())
          exit(1)

- bash: |
    echo "Searching for paths added by the action..."
    # Search the log file for the specific pattern indicating a path addition.
    # The grep command uses a lookbehind `(?<=Adding )` and a lookahead `(?= to PATH.)` 
    # to extract only the path itself.
    added_paths=$(grep -oP '(?<=Adding ).*(?= to PATH.)' action_output.log)

    if [ -z "$added_paths" ]; then
      echo "No new paths were found in the action's output."
    else
      echo "Found paths to add:"
      echo "$added_paths"
      
      # Loop through each found path and prepend it to the ADO job's PATH
      while IFS= read -r path; do
        if [ -n "$path" ]; then
          echo "Prepending to PATH: $path"
          # Use the special Azure Pipelines logging command to prepend a directory to the PATH
          echo "##vso[task.prependpath]$path"
        fi
      done <<< "$added_paths"
    fi
  displayName: 'Update ADO Job PATH from Action Output'

- bash: |
    echo "Verifying CMake installation by checking its version..."
    cmake --version
  displayName: 'Verify CMake'