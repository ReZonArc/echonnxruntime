parameters:
  - name: JarFileDirectory
    type: string

steps:
  - task: AzureKeyVault@2
    displayName: 'Get GnuPG signing keys'
    inputs:
      azureSubscription: 'AIInfraBuildOnnxRuntimeOSS'
      KeyVaultName: 'ort-release'
      SecretsFilter: 'java-pgp-pwd,java-pgp-key'
      RunAsPreJob: false

  - task: PowerShell@2
    displayName: 'Sign files: GnuPG, sha1, and md5'
    inputs:
      targetType: 'inline'
      pwsh: true
      workingDirectory: '$(Build.SourcesDirectory)'
      script: |
        $jar_file_directory = '${{ parameters.JarFileDirectory }}'
        $working_directory = '$(Build.SourcesDirectory)'

        $original_passphrase='$(java-pgp-pwd)'
        $original_private_key='$(java-pgp-key)'

        $gpg_exe_path = "C:\Program Files (x86)\gnupg\bin\gpg.exe"

        $passphrase_file = Join-Path -Path $working_directory -ChildPath "passphrase.txt"
        $private_key_file = Join-Path -Path $working_directory -ChildPath "private_key.txt"

        Write-Host "Generating temporary GnuPG key files."
        # Use Set-Content for simplicity and to avoid newline issues.
        Set-Content -Path $passphrase_file -Value $original_passphrase -Encoding ascii
        Set-Content -Path $private_key_file -Value $original_private_key -Encoding ascii
        Write-Host "Generated temporary GnuPG key files."

        Write-Host "Importing GnuPG private key."
        & $gpg_exe_path --batch --import $private_key_file
        if ($lastExitCode -ne 0) {
            Write-Error "GnuPG private key import failed. Exitcode: $lastExitCode"
            exit $lastExitCode
        }
        Write-Host "Successfully imported GnuPG private key."

        # Get the list of files to sign and checksum ONCE.
        $files_to_process = Get-ChildItem $jar_file_directory -Recurse -Force -File

        foreach ($file in $files_to_process) {
            $file_path = $file.FullName
            Write-Host "Processing file: $file_path"

            # 1. GnuPG Signing (.asc)
            Write-Host "  - GnuPG signing..."
            & $gpg_exe_path --pinentry-mode loopback --passphrase-file $passphrase_file --detach-sign --armor $file_path
            if ($lastExitCode -ne 0) {
                Write-Error "GnuPG signing command failed for '$file_path'. Exitcode: $lastExitCode"
                exit $lastExitCode
            }

            # 2. SHA-1 Checksum (.sha1)
            Write-Host "  - Generating SHA-1 checksum..."
            $sha1_hash = (Get-FileHash -Algorithm SHA1 -Path $file_path).Hash
            Set-Content -Path "$file_path.sha1" -Value $sha1_hash.ToLower()

            # 3. MD5 Checksum (.md5)
            Write-Host "  - Generating MD5 checksum..."
            $md5_hash = (Get-FileHash -Algorithm MD5 -Path $file_path).Hash
            Set-Content -Path "$file_path.md5" -Value $md5_hash.ToLower()
        }

        Write-Host "File signing and checksum generation completed."
        Write-Host "Deleting temporary GnuPG key files."
        Remove-Item -Path $passphrase_file -Force
        Remove-Item -Path $private_key_file -Force
        Write-Host "Deleted temporary GnuPG key files."