parameters:
- name: NpmPackagingMode
  displayName: 'NPM packages publish configuration'
  type: string
  default: 'dev'
- name: BuildConfig
  displayName: 'Build config'
  type: string
  values:
  - 'Release'
  - 'MinSizeRel'
  - 'Debug'
  - 'RelWithDebugInfo'
  default: 'Release'
- name: PoolName
  displayName: 'Pool name'
  type: string
- name: PackageName
  displayName: 'Package name'
  type: string
  default: 'NPM_packages'
- name: InitialStageDependsOn
  displayName: 'Stage that the initial stage of react-native-ci depends on'
  type: string
  default: ''
- name: enable_code_sign
  displayName: Use GPG to sign the jars
  type: boolean
- name: is1ES
  type: boolean
  default: false

stages:
- stage: Build_Android_Packages
  displayName: Build_Android_Packages
  dependsOn: '${{parameters.InitialStageDependsOn}}'
  jobs:
  - template: android-java-api-aar.yml
    parameters:
      buildConfig: '${{parameters.BuildConfig}}'
      buildSettings: '$(Build.SourcesDirectory)/tools/ci_build/github/js/react_native_e2e_full_aar_build_settings.json'
      artifactName: 'onnxruntime-android-full-aar'
      job_name_suffix: 'For_React_Native'
      enable_code_sign: '${{parameters.enable_code_sign}}'
      pool_name: '${{parameters.PoolName}}'
      packageName: 'onnxruntime-android'
      is1ES: '${{parameters.is1ES}}'

- stage: ReactNative_CI_Android
  displayName: ReactNative_CI_Android
  dependsOn: Build_Android_Packages
  jobs:
  - template: ../stages/jobs/react-natvie-andriod-e2e-test-job.yml
    parameters:
      PackageName: '${{parameters.PackageName}}'
      ArtifactName: 'onnxruntime-android-full-aar'
      NpmPackagingMode: '${{parameters.NpmPackagingMode}}'
      is1ES: '${{parameters.is1ES}}'

- stage: ReactNative_CI_iOS
  displayName: ReactNative_CI_iOS
  dependsOn: '${{parameters.InitialStageDependsOn}}'
  variables:
  - name: publishPipelineArtifactTask
    ${{ if eq(parameters.is1ES, true) }}:
      value: 1ES.PublishPipelineArtifact@1
    ${{ else }}:
      value: PublishPipelineArtifact@1
  jobs:
  - job: ReactNative_CI_iOS_build

    ${{ if eq(parameters.is1ES, false) }}:
      pool:
        vmImage: 'macOS-14'
    ${{ if eq(parameters.is1ES, true) }}:
      pool:
        name: 'Azure Pipelines'
        image: 'macOS-14'
        os: 'macOS'

    timeoutInMinutes: 150

    variables:
      runCodesignValidationInjection: false
      TODAY: $[format('{0:dd}{0:MM}{0:yyyy}', pipeline.startTime)]
      ORT_CACHE_DIR: '$(Pipeline.Workspace)/ccache_ort'

    steps:
    - template: use-xcode-version.yml

    - task: UsePythonVersion@0
      displayName: Use python 3.12
      inputs:
        versionSpec: "3.12"
        addToPath: true
        architecture: "x64"

    - script: |
        pip install -r tools/ci_build/github/apple/ios_packaging/requirements.txt
      displayName: "Install Python requirements"

    # Build the iOS package
    - template: mac-build-step-with-cache.yml
      parameters:
        WithCache: true
        Today: $(TODAY)
        AdditionalKey: react_${{parameters.BuildConfig}}
        CacheDir: $(ORT_CACHE_DIR)
        BuildStep:
        - script: |
            set -e -x
            python $(Build.SourcesDirectory)/tools/ci_build/github/apple/build_and_assemble_apple_pods.py \
              --build-dir "$(Build.BinariesDirectory)/ios_framework_full" \
              --staging-dir "$(Build.BinariesDirectory)/ios_pod" \
              --build-settings-file $(Build.SourcesDirectory)/tools/ci_build/github/js/react_native_e2e_full_ios_framework_build_settings.json
          displayName: Build iOS package and assemble pods
          env:
            CC: clang
            CXX: clang++
            CCACHE_CPP2: 1
            CCACHE_DEPEND: 1
            CCACHE_SLOPPINESS: modules
            CCACHE_DIR: $(ORT_CACHE_DIR)

    - task: ${{ variables.publishPipelineArtifactTask }}
      inputs:
        artifactName: 'ios_pod'
        targetPath: '$(Build.BinariesDirectory)/ios_pod'
      displayName: Publish React Native iOS pod files

  - job: ReactNative_CI_iOS_test
    dependsOn: 'ReactNative_CI_iOS_build'

    ${{ if eq(parameters.is1ES, false) }}:
      pool:
        vmImage: 'macOS-14'
    ${{ if eq(parameters.is1ES, true) }}:
      pool:
        name: 'Azure Pipelines'
        image: 'macOS-14'
        os: 'macOS'

    timeoutInMinutes: 90

    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'ios_pod'
        targetPath: '$(Build.BinariesDirectory)/ios_pod'
      displayName: Download React Native iOS pod files

    - template: use-xcode-version.yml

    - task: UsePythonVersion@0
      displayName: Use python 3.12
      inputs:
        versionSpec: "3.12"
        addToPath: true
        architecture: "x64"

    # Test the iOS package
    - task: NodeTool@0
      inputs:
        versionSpec: '22.x'

    - script:
        brew install coreutils ninja npm
      displayName: Install coreutils, ninja, npm

    - script:
        brew tap wix/brew
      displayName: brew tap wix/brew

    - script:
        brew install applesimutils
      displayName: Install applesimutils tools required by detox ios

    - template: ../stages/jobs/steps/react-native-bootstrap-steps.yml

    - script: |
        ORT_C_LOCAL_POD_PATH=$(Build.BinariesDirectory)/ios_pod/onnxruntime-c \
        pod install
      workingDirectory: '$(Build.SourcesDirectory)/js/react_native/ios'
      displayName: Pod install for onnxruntime react native ios bridge library

    - script: |
        ORT_C_LOCAL_POD_PATH=$(Build.BinariesDirectory)/ios_pod/onnxruntime-c \
        pod install
      workingDirectory: '$(Build.SourcesDirectory)/js/react_native/e2e/ios'
      displayName: Pod install for onnxruntime react native ios e2e tests

    - script: |
        detox build --configuration ios.sim.release
      workingDirectory: '$(Build.SourcesDirectory)/js/react_native/e2e'
      displayName: Build React Native Detox iOS e2e Tests

    #
    # Unit tests and E2E tests with iOS simulator
    #
    - script: |
        set -e

        DEVICE_ID_FILE="$(Build.BinariesDirectory)/ios_simulator_device_id.txt"

        xcrun simctl create iPhoneRNTest \
          com.apple.CoreSimulator.SimDeviceType.iPhone-15 \
          com.apple.CoreSimulator.SimRuntime.iOS-17-4 \
          > "${DEVICE_ID_FILE}"

        DEVICE_ID=$(cat "$DEVICE_ID_FILE")

        echo "Created simulator device with id: ${DEVICE_ID}"

        xcrun simctl boot "${DEVICE_ID}"

        xcrun simctl bootstatus "${DEVICE_ID}"

        open -a Simulator --args -CurrentDeviceUDID "${DEVICE_ID}"
      displayName: Start iOS Simulator

    - script: |
        set -e -x

        DEVICE_ID_FILE="$(Build.BinariesDirectory)/ios_simulator_device_id.txt"
        DEVICE_ID="$(cat "${DEVICE_ID_FILE}")"

        xcrun xcodebuild -sdk iphonesimulator \
          -configuration Debug \
          -workspace "$(Build.SourcesDirectory)/js/react_native/ios/OnnxruntimeModule.xcworkspace" \
          -scheme OnnxruntimeModuleTest \
          -destination "platform=iOS Simulator,id=${DEVICE_ID}" \
          test \
          CODE_SIGNING_ALLOWED=NO

      displayName: Run React Native iOS Instrumented Tests

    # - task: PublishTestResults@2
    #   inputs:
    #     testResultsFiles: '$(Build.SourcesDirectory)/js/react_native/ios/build/reports/test-results.xml'
    #     failTaskOnFailedTests: true
    #     testRunTitle: 'React Native iOS Instrumented Test results'
    #   condition: succeededOrFailed()
    #   displayName: Publish React Native iOS Instrumented Test Results

    # - script: |
    #     xcrun simctl list devices
    #   displayName: List iOS Simulators
    #   continueOnError: true

    - script: |
        set -e -x

        DEVICE_ID_FILE="$(Build.BinariesDirectory)/ios_simulator_device_id.txt"
        DEVICE_ID="$(cat "${DEVICE_ID_FILE}")"

        DETOX_CONFIG_FILE="$(Build.SourcesDirectory)/js/react_native/e2e/.detoxrc.json"
        jq --arg device_id "${DEVICE_ID}" '(.devices|.simulator|.device) = {id: $device_id}' \
          < "${DETOX_CONFIG_FILE}" \
          > "${DETOX_CONFIG_FILE}.updated"

        mv "${DETOX_CONFIG_FILE}.updated" "${DETOX_CONFIG_FILE}"

        echo "Updated ${DETOX_CONFIG_FILE} with simulator device ID"
        cat "${DETOX_CONFIG_FILE}"

      displayName: Update .detoxrc.json with simulator device

    - script: |
        JEST_JUNIT_OUTPUT_FILE=$(Build.SourcesDirectory)/js/react_native/e2e/ios-test-results.xml \
          detox test --record-logs all \
                     --configuration ios.sim.release \
                     --loglevel trace \
                     --take-screenshots failing
      workingDirectory: '$(Build.SourcesDirectory)/js/react_native/e2e'
      displayName: Run React Native Detox iOS e2e Tests

    - script: |
        set -e
        DEVICE_ID_FILE="$(Build.BinariesDirectory)/ios_simulator_device_id.txt"
        if [[ -f "${DEVICE_ID_FILE}" ]]; then
          DEVICE_ID="$(cat "${DEVICE_ID_FILE}")"
          xcrun simctl delete "${DEVICE_ID}"
          rm "${DEVICE_ID_FILE}"
        fi
      displayName: Stop iOS Simulator
      condition: always()

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '$(Build.SourcesDirectory)/js/react_native/e2e/ios-test-results.xml'
        failTaskOnFailedTests: true
        testRunTitle: 'React Native Detox iOS e2e Test Results'
      condition: succeededOrFailed()
      displayName: Publish React Native Detox iOS e2e Test Results

    - task: ${{ variables.publishPipelineArtifactTask }}
      inputs:
        artifactName: 'ios_e2e_test_logs_$(Build.BuildId)_$(Build.BuildNumber)_$(System.JobAttempt)'
        targetPath: '$(Build.SourcesDirectory)/js/react_native/e2e/artifacts'
      condition: succeededOrFailed()
      displayName: Publish React Native Detox E2E test logs

    - template: explicitly-defined-final-tasks.yml
