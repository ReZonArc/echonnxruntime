parameters:
- name: actionVersion
  type: string
  default: 'v0.0.7' # Default version if not specified by the calling pipeline

steps:
- task: DownloadGitHubRelease@0
  displayName: 'Download Action Release ${{ parameters.actionVersion }}'
  inputs:
    connection: 'github.com' # Use 'github.com' for public repos
    repository: 'microsoft/onnxruntime-github-actions'
    tag: '${{ parameters.actionVersion }}'
    itemPattern: '**/*.zip'
    downloadPath: '$(System.ArtifactsDirectory)/action-download'

- task: ExtractFiles@1
  displayName: 'Extract Action Files'
  inputs:
    archiveFilePatterns: '$(System.ArtifactsDirectory)/action-download/**/*.zip'
    destinationFolder: '$(System.ArtifactsDirectory)/action-unzipped'
    cleanDestinationFolder: true

- task: PythonScript@0
  displayName: 'Run setup-build-tools Action'
  inputs:
    scriptSource: 'inline'
    script: |
      import os
      import subprocess
      import glob

      # --- 1. Define Action Inputs ---
      action_inputs = {
          'INPUT_CMAKE-VERSION': '3.31.8',
          'INPUT_CMAKE-HASH': '99cc9c63ae49f21253efb5921de2ba84ce136018abf08632c92c060ba91d552e0f6acc214e9ba8123dee0cf6d1cf089ca389e321879fd9d719a60d975bcffcc8',
          'INPUT_VCPKG-VERSION': '2025.06.13',
          'INPUT_VCPKG-HASH': '735923258c5187966698f98ce0f1393b8adc6f84d44fd8829dda7db52828639331764ecf41f50c8e881e497b569f463dbd02dcb027ee9d9ede0711102de256cc',
          'INPUT_ADD-CMAKE-TO-PATH': 'true',
          'INPUT_DISABLE-TERRAPIN': 'true'
      }

      # --- 2. Locate and Run the Action Script ---
      unzipped_dir = '$(System.ArtifactsDirectory)/action-unzipped'
      
      # The unzipped contents are in a versioned sub-directory
      search_pattern = os.path.join(unzipped_dir, 'onnxruntime-github-actions-*')
      extracted_folders = glob.glob(search_pattern)
      if not extracted_folders:
          raise Exception(f"Could not find extracted action directory matching '{search_pattern}'")
      action_base_path = extracted_folders[0]
      print(f"Found action base path: {action_base_path}")
      
      action_script_path = os.path.join(action_base_path, 'actions', 'setup-build-tools', 'dist', 'index.js')
      if not os.path.exists(action_script_path):
          raise FileNotFoundError(f"Action script not found at expected path: {action_script_path}")
          
      env = os.environ.copy()
      env.update(action_inputs)

      print(f"Running action script: {action_script_path}")
      with open('action_output.log', 'w') as log_file:
          process = subprocess.run(
              ['node', action_script_path],
              env=env,
              stdout=log_file,
              stderr=subprocess.STDOUT,
              text=True
          )
      
      print("Action script finished.")
      if process.returncode != 0:
          print(f"##vso[task.logissue type=error]Action script failed with exit code {process.returncode}.")
          with open('action_output.log', 'r') as log_file:
              print(log_file.read())
          exit(1)

- bash: |
    echo "Searching for paths added by the action..."
    added_paths=$(grep -oP '(?<=Adding ).*(?= to PATH.)' action_output.log)

    if [ -z "$added_paths" ]; then
      echo "No new paths were found in the action's output."
    else
      echo "Found paths to add to the environment:"
      echo "$added_paths"
      
      while IFS= read -r path; do
        if [ -n "$path" ]; then
          echo "Prepending to PATH: $path"
          echo "##vso[task.prependpath]$path"
        fi
      done <<< "$added_paths"
    fi
  displayName: 'Update ADO Job PATH from Action Output'

- bash: |
    echo "Verifying CMake installation..."
    cmake --version
    echo "Verifying vcpkg installation..."
    $VCPKG_INSTALLATION_ROOT/vcpkg version
  displayName: 'Verify Tools'